# see https://man7.org/linux/man-pages/man1/tmux.1.html
# https://github.com/zgracem/dotconfig/blob/40b9709950c94d2d3fd31c024ab6594a5f897b8c/tmux/hvdc.conf
# https://gist.github.com/sdondley/b01cc5bb1169c8c83401e438a652b84e

# ==========================
# ===  General settings  ===
# ==========================
DOTDIR="$HOME/.dotfiles"

set -g default-terminal "tmux-256color"
set -ag terminal-overrides ",xterm*:Tc"
%if #{>=:#{version},3.3}
  set-option -sa terminal-features ',xterm*:RGB'
  set-option -g allow-passthrough on
%endif
set -g history-limit 8000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 3000
set -g remain-on-exit off
set -g repeat-time 600 # ms after repeat is over.
set -g renumber-windows on
set -g allow-rename off
set -g automatic-rename on
set -g automatic-rename-format '#(basename $(dirname #{pane_current_path}))/#{b:pane_current_path}'
setw -g aggressive-resize on
set -g focus-events on
# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
# set -g set-titles-string "#I:#W"
set -g set-titles-string "#T - #W"
# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1
# Enable mouse support
set -g mouse on


# ==========================
# ===   Key bindings     ===
# ==========================
# unbind C-b
set -g prefix C-b
# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind \}    # swap-pane -D
unbind \{    # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
# unbind n    # next-window
# unbind p    # previous-window
unbind l    # last-window
unbind o    # focus thru panes
unbind -
unbind \;   # last-pane
unbind !
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
# unbind z    # zoom-pane
unbind s    # choose-tree
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left

# Reload tmux configuration
bind C-r source-file ~/.tmux.conf \; display "Reloaded from ~/.tmux.conf"
# new window and retain cwd
bind c new-window -c "#{pane_current_path}"
# option+t for a new floating window (unique floating window session per window/tab)
# bind C-t if-shell "[[ $(tmux display-message -p '#S') = float-* ]] || [[ $(tmux display-message -p '#S') == 'buildproc' ]]" { detach-client } { run-shell "tmux popup -w 95% -h 95% -x 9 -d '#{pane_current_path}' -E 'tmux attach -t \'float-#{pane_id}\' || tmux new -s \'float-#{pane_id}\' \;'" }

# Prompt to rename window right after it's created
# set-hook -g after-new-window 'command-prompt -I "#{pane_current_command}:#(basename #{pane_current_path})" "rename-window '%%'"'

### keybinding
### -r: root binding
# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"
bind C-n command-prompt -p "enter session" "new-session -A -s '%%'"
bind _ command-prompt -p "#[fg=$tmux_fg]split vertical and run:" "split-window -d -p 40 -c '#{pane_current_path}' '%% ; cat'"
bind \; command-prompt
bind ! respawn-pane -k -c "#{pane_current_path}"
bind @ command-prompt -p 'respawn a pane(I):' 'respawn-pane -k -t %%'
bind M-p command-prompt -p 'save history to filename:' -I '~/local-tmux.history' 'capture-pane -S - ; save-buffer %1 ; delete-buffer'

# Split panes
bind / split-window -h -l 50% -c "#{pane_current_path}"
bind - split-window -v -l 50% -c "#{pane_current_path}"

# Select pane and windows
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind -r enter next-layout
bind + select-layout even-vertical
bind = select-layout even-horizontal

bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9
bind -n M-. next-window
bind -n M-, previous-window

bind-key -n C-h if-shell "$is_vim" 'send-keys C-h'  'select-pane -LZ'
bind-key -n C-j if-shell "$is_vim" 'send-keys C-j'  'select-pane -DZ'
bind-key -n C-k if-shell "$is_vim" 'send-keys C-k'  'select-pane -UZ'
bind-key -n C-l if-shell "$is_vim" 'send-keys C-l'  'select-pane -RZ'
bind -r C-h select-pane -LZ
bind -r C-j select-pane -DZ
bind -r C-k select-pane -UZ
bind -r C-l select-pane -RZ
bind -n M-o select-pane -lZ

bind-key -n M-h if-shell "$is_vim" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-j if-shell "$is_vim" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-k if-shell "$is_vim" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-l if-shell "$is_vim" 'send-keys M-l' 'resize-pane -R 4'

bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5

bind -r Tab last-window   # cycle thru MRU tabs
bind -r C-s switch-client -l
bind -r C-o swap-pane -D

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# Zoom pane
bind z resize-pane -Z
# bind F2 to root table
bind -T root F2 resize-pane -Z

# synchronize mode (toggle)
bind -r C-e set-window-option synchronize-panes

# Link window
# bind L command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind \\ if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x run-shell "~/.tmux/bin/tmux-kill-pane.sh"
bind X confirm-before -p "kill window? (y/n)" kill-window
bind C-q confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session
bind N new-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind M-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# ===== popup & commands
# <prefix>w to switch windows.
bind C-w run "~/.tmux/bin/windows.sh switch"
# <prefix>s to switch sessions
bind s run "~/.tmux/bin/session.sh switch"
bind S run "~/.tmux/bin/session.sh kill"
# start new session from folder.
bind y popup -E -w 70% -h 60% ~/.tmux/bin/tmux-sessionizer
bind G new-window -aS -c "#{pane_current_path}" -n "-TIG: #{b:pane_current_path}" 'tig'
bind T run "~/.tmux/bin/tmux-tpop top"
bind f run "~/.tmux/bin/tmux-scratch-toggle"
bind : run "~/.tmux/bin/command.sh"
bind & run "~/.tmux/bin/process.sh"

# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'
# Activity bell and whistles
set -g visual-activity on
# TODO: Does not work as well, check on newer versions
# set -g visual-silence on
# BUG: bell-action other ignored · Issue #1027 · tmux/tmux · GitHub - https://github.com/tmux/tmux/issues/1027
set -g visual-bell on
setw -g bell-action other

# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
set -g @copy_use_osc52_fallback on
# Prefer vi style key table
setw -g mode-keys vi
bind -r P paste-buffer
bind C-p choose-buffer
# trigger copy mode by
bind -r [ copy-mode
# Scroll up/down by 1 line, half screen, whole screen
# bind -T copy-mode-vi M-Up              send-keys -X scroll-up
# bind -T copy-mode-vi M-Down            send-keys -X scroll-down
# bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
# bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
# bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
# bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down

# wrap default shell in reattach-to-user-namespace if available
# there is some hack with `exec & reattach`, credits to "https://github.com/gpakosz/.tmux"
# don't really understand how it works, but at least window are not renamed to "reattach-to-user-namespace"
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \"exec $(tmux show -gv default-shell) 2>/dev/null & reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"

yank="~/.tmux/yank.sh"

# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane \
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
   send-keys -X clear-selection

# iTerm2 works with clipboard out of the box, set-clipboard already set to "external"
# tmux show-options -g -s set-clipboard
# set-clipboard on|external

# =====================================
# ===           Theme               ===
# =====================================

# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
# color see https://superuser.com/a/1104214/163308
# =====================================
# ===    Appearence and status bar  ===
# ======================================
# window segments in status line
setw -g window-status-separator ""
# outline for active pane
set -g pane-border-status top
# general status bar settings
set -g status on
set -g status-interval 5
set -g status-justify left

##############################
### Color & Style Settings ###
##############################

set -g status-left-length 32
set -g status-right-length 150

tmux_bg='#121212'
tmux_fg='#b2a2a2'
tmux_aqua='#3affdb'
tmux_beige='#f5c06f'
tmux_blue='#0031a9'
tmux_brown='#905532'
tmux_cyan='#008899'
tmux_darkblue='#0000ff'
tmux_darkorange='#808000'
tmux_green='#006800'
tmux_grey="#8D8E84"
tmux_sinkblue='#003497'
tmux_lightblue='#3548cf'
tmux_lightgreen='#316500'
tmux_magenta='#721045'
tmux_orange='#624416'
tmux_pink='#7b435c'
tmux_purple='#624c83'
tmux_red='#972500'
tmux_salmon='#ee6e73'
tmux_violet='#a9a1e1'
tmux_white='#ffffff'
tmux_yellow='#d0bc00'
tmux_tab_bg='#1e1e1e'
tmux_tab_current_bg='#000000'
tmux_tab_current_fg=$tmux_red
tmux_lstatus_bg_zoom="#{?window_zoomed_flag,$tmux_orange,$tmux_tab_bg}"
tmux_lstatus_bg="#{?client_prefix,$tmux_pink,$tmux_lstatus_bg_zoom}"

# default statusbar colors
set-option -g status-style fg=$tmux_fg,bg=$tmux_bg
set-window-option -g window-status-style fg=$tmux_bg,bg=$tmux_tab_bg
set-window-option -g window-status-format "#[fg=$tmux_tab_bg,bg=$tmux_bg]#[fg=$tmux_fg,bg=$tmux_tab_bg] #I:#{?window_name,#{window_name}, #(basename $(dirname #{pane_current_path}))/#{b:pane_current_path}} #[bg=$tmux_bg,fg=$tmux_tab_bg]"

# active window title colors
set-window-option -g window-status-current-style fg=$tmux_fg,bg=$tmux_tab_current_bg
set-window-option -g window-status-current-format "#[fg=$tmux_tab_current_bg,bg=$tmux_bg]#[bold,fg=$tmux_tab_current_fg,bg=$tmux_tab_current_bg] #I:#{?window_name,#{window_name}, #(basename $(dirname #{pane_current_path}))/#{b:pane_current_path}} #[bg=$tmux_bg,fg=$tmux_tab_current_bg]"
set-window-option -g status-left-style fg=$tmux_fg,bg=$tmux_lstatus_bg
set-window-option -g status-right-style fg=$tmux_fg,bg=$tmux_tab_bg
set-window-option -g status-position top
# pane border colors
set-window-option -g pane-active-border-style fg=$tmux_red
set-window-option -g pane-border-style fg=$tmux_grey
set-window-option -g pane-border-format "[#[fg=#{?pane_active,$tmux_red,$tmux_grey}]#{?pane_active,#[bold],} :#P.#I: #T #[fg=$tmux_grey,nobold]]"
# message text
set-option -g message-style bg=$tmux_bg,fg=$tmux_grey
# pane number display
set-option -g display-panes-active-colour $tmux_magenta
set-option -g display-panes-colour $tmux_blue
# clock
set-window-option -g clock-mode-colour $tmux_magenta

tm_session_name="#[bold]  #S #[fg=$tmux_bg]"
set -g status-left "$tm_session_name#[bg=$tmux_bg]"

tm_battery="#{battery_status_fg}#{battery_percentage}"
tm_host="#[bold] #h "
tm_is_zoomed="#{?window_zoomed_flag,[Z+#{window_panes}] ,}"
tm_is_keys_off="#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')"
tm_keyboard_layout="󰌌 #(defaults read ~/Library/Preferences/com.apple.HIToolbox.plist AppleCurrentKeyboardLayoutInputSourceID | awk -F. '{print $4}')"
set -g status-right "#[fg=$tmux_bg] #[fg=$tmux_fg]${tm_is_zoomed}${tm_is_keys_off}${tm_keyboard_layout}${tm_host}${tm_battery}"

# ==============end apperance

# ============================
# ===       Plugins        ===
# ============================
# Configure tmux-battery widget colors
set -g @batt_icon_status_unknown ""
# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_show_copy_mode 'on'

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  XDG_CONFIG_HOME\
  XDG_CACHE_HOME\
  XDG_DATA_HOME\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  DOTFILES\
  FZF_DEFAULT_OPTS\
  WINDOWID\
  XAUTHORITY\
  fish_pid\
  EDITOR"

bind '$' run "~/.tmux/renew_env.sh"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-battery'
# set -g @plugin 'samoshkin/tmux-plugin-sysstat'

# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
# see: toggle on/off all keybindings · Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237
# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  refresh-client -S

# Run all plugins' scripts
run '~/.tmux/plugins/tpm/tpm'

# use fish as tmux shell
set -g default-command /usr/local/bin/fish
set -g default-shell /usr/local/bin/fish
unbind Escape
